1-val ile var arasındaki fark nedir?

# Val ile var arasındaki fark kısaca değişken oluştururken değişkenin sadece okunabilir mi yoksa hem okunabilir hem değiştirilebilir mi olduğunu belirler.

2-Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

# Bir var değişkeni val gibi çalıştırmak için değişkeni private set yapmalıyız.Bunu yapma nedenimiz değişkeni başka sınıflarda değiştirilmesini önlemek.
Örnek senaryo olarak diyelim ki bir oyun geliştiriyorsunuz ve oyun karakterlerinin sağlık puanlarını yöneten bir sınıfınız var. Karakterlerin sağlık puanlarını saklamak için SaglikDurumu adında bir sınıf oluşturuyorsunuz. Ancak, bu sağlık puanlarının oyun içinde sadece bu sınıfta atanıp burda değişmesi lazım bu durumda kullanabiliriz.

3-"Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

# Immutable dediğimiz yapıda değeri hiçbir şekilde değiştiremeyiz.ReadOnlyde ise değeri okuyabiliriz fakat set edemeyiz.Val değişkenlerde ise değişkenin get fonksiyonunda return ettiğimiz değer başka değiştirilebilir değerlerden oluşuyorsa bu değerleri farklı girdiğimiz her fonksiyon için bu val değerinden farklı cevap alırız bu yüzden de immutable olamaz.

4-"Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

# Type inference(tip çıkarımı) kotlinde bir değişken oluştururken hangi türde olacağını belirtmediğimizde de IDE’nin otomatik olarak değişken türünü belirlemesidir.
Değerini daha sonradan vereceğimiz değişkenlere makinenin bellekte ne kadar yer ayırması gerektiğini bildirmemeiz için : ile değişken türünü bildirmeliyiz.

5-Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

# Kotlinde primitive tipler aslında yoktur fakat sınıf şeklinde erişebiliyoruz.Arka planda sınıfların kullanımı da byte code'a çevrildikten sonra javadaki primitive tiplerle aynı oluyor ve performans kaybı da neredeyse olmuyor.

6-"Tip Güvenliği" (Type Safety) kavramını açıklayın.

# Tip güvenliği, değişken oluştururken değişkene hangi tür değişken olduğunu ":" ile yazmaya denir.









